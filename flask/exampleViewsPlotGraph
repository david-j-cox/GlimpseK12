from a_Model import ModelIt
from flask import render_template
from flask import request
from flaskexample import app
from sqlalchemy import create_engine
from sqlalchemy_utils import database_exists, create_database
import pandas as pd
import numpy as np
import psycopg2
import json
import plotly
import plotly.graph_objs as go

user = 'postgres' #add your username here (same as previous postgreSQL)   
password = '5802'                   
host = 'localhost'
dbname = 'phillyRE_db'
db = create_engine('postgres://%s%s/%s'%(user,host,dbname))
con = None
con = psycopg2.connect(database = dbname, user = user, host = host, password = password)

start_date = '1999-01-01'
end_date = '2019-12-31'

@app.route('/')
@app.route('/index')
def index():
    return render_template("index.html", title='Home')


# mynote: adding buttons and integrating the app     
@app.route('/input')
def philly_realestate_input():
    return render_template("input.html")


@app.route('/output')
def philly_realestate_output():
  #pull 'birth_month' from input field and store it
  patient = request.args.get('zip_code')
    #just select the Cesareans from the birth dtabase for the month that the user inputs
  # query = "SELECT index, attendant, birth_month FROM birth_data_table WHERE delivery_method='Cesarean' AND birth_month='%s'" % patient
  query = "SELECT * FROM philly_realestate_table WHERE zip_code='%s' AND document_type='DEED' AND cash_consideration > 1"  % patient
  print(query)
  query_results=pd.read_sql_query(query,con)
  print(query_results)
  # Convert to a date first
  query_results['display_date'] = query_results['display_date'].astype('datetime64[ns]')
  #Then sort...
  df_sorted = query_results.sort_values(by='display_date')
  # Only include from year 1999
  mask = (df_sorted['display_date'] > start_date) & (df_sorted['display_date'] <= end_date)
  df_temp = df_sorted.loc[mask] # Temp (before outlier removal)
  # Remove outliers 
  q = df_temp["cash_consideration"].quantile(0.95)
  df = df_temp[df_temp["cash_consideration"] < q]
  #Create graph
  data = [go.Scatter(x=df['display_date'], y=df['cash_consideration'])]
  graphJSON = json.dumps(data, cls=plotly.utils.PlotlyJSONEncoder)
  return render_template('output.html', graphJSON=graphJSON)